// TOP

top: container+
?container: level_container | renderer_container
level_container: "level" "{" declaration+ "}"
renderer_container: "renderer" "{" declaration+ "}"

// TYPES

?type: primitive_type | array_type
primitive_type: "void" -> void
              | "float" -> float 
              | "int" -> int
              | "vec2" -> vec2
              | "vec3" -> vec3
              | "vec4" -> vec4
              | "mat3" -> mat3
              | "mat4" -> mat4
              | "sampler2D" -> sampler2d
array_type: primitive_type array_mod


// DECLARATIONS

?declaration: var_decl_stmt | function_declaration
function_declaration: type identifier "(" parameters ")" block
parameters: | (parameter ("," parameter)*)
parameter: type identifier
var_declaration: qualifiers? type identifier array_mod? initializer?
qualifiers: qualifier+
qualifier: "const" -> constant
         | "uniform" -> uniform
array_mod: "[" expression? "]"
initializer: "=" expression


// STATEMENTS

?statement: block | expression_statement | if_statement
          | var_decl_stmt | for_statement | while_statement
          | continue_statement | break_statement | return_statement
          | discard_statement
block: "{" statement+ "}"
expression_statement: expression? ";"
var_decl_stmt: var_declaration ";"
if_statement: "if" "(" expression ")" block ("else" ("if" "(" expression ")")? block)*
for_statement: "for" "(" fs_interior ";" fs_interior_2 ";" fs_interior_2 ")" block
?fs_interior: | expression | var_declaration
?fs_interior_2: | expression
while_statement: "while" "(" expression ")" block
continue_statement: "continue" ";"
break_statement: "break" ";"
return_statement: "return" expression? ";"
discard_statement: "discard" ";"


// EXPRESSIONS

expression: assignment
?assignment: conditional (ass_op conditional)*
?conditional: or_expression ("?" expression ":" assignment)?
?or_expression: and_expression ("||" and_expression)*
?and_expression: equality ("&&" equality)*
?equality: relational (eq_op relational)*
?relational: additive (rel_op additive)*
?additive: multiplicative (add_op multiplicative)*
?multiplicative: unary (mul_op unary)*
?unary: u_op unary | postfix
?postfix: primary | fcall | array_literal | indexed 
        | field_selection | increment | decrement
increment: postfix "++"
decrement: postfix "--"
indexed: postfix "[" expression "]"
fcall: (type | identifier) "(" arguments? ")"
array_literal: type "[" expression "]" "(" arguments? ")"
arguments: expression ("," expression)*
field_selection: postfix "." identifier
?primary: NUMBER | group | identifier
group: "(" expression ")"
identifier: /[a-zA-Z_][a-zA-Z_0-9]*/


// OPERATORS

ass_op: "=" -> eq
      | "*=" -> times_eq
      | "/=" -> divide_eq
      | "%=" -> modulo_eq
      | "+=" -> plus_eq
      | "-=" -> subtract_eq
eq_op: "==" -> is_equal
     | "!=" -> is_not_equal
rel_op: "<" -> below
      | ">" -> above
      | "<=" -> at_most
      | ">=" -> at_least
add_op: "+" -> add
      | "-" -> subtract
mul_op: "*" -> times
      | "/" -> divided
      | "%" -> percent
u_op: "-" -> negative
    | "!" -> logical_not


// IMPORTS

%import common.NUMBER
%import common.WS
%ignore WS
%ignore /\/\/[^\n]*/

