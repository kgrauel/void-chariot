
level {
    uniform float iTime;
    
    float opUnion( float d1, float d2 ) { return min(d1,d2); }
    float opSubtraction( float d1, float d2 ) { return max(-d1,d2); }
    float opIntersection( float d1, float d2 ) { return max(d1,d2); }

    float sdSphere( vec3 p, float s )
    {
        return length(p)-s;
    }

    float sdBoxFrame( vec3 p, vec3 b, float e )
    {
        p = abs(p)-b;
        vec3 q = abs(p+e)-e;
        return min(min(
            length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),
            length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),
            length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));
    }

    float sdCappedTorus(vec3 p, vec2 sc, float ra, float rb)
    {
        p.x = abs(p.x);
        float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);
        return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;
    }

    float sdf(vec3 p)
    {
        float an = 2.5 * (0.5 + 0.5 * sin(iTime * 1.1 + 3.0));
        float v = 10000.0;
        v = min(v, p.y + 0.3);
        v = opSubtraction(sdSphere(p - vec3(0.0, 0.8, 0.0), 1.5), v);
        v = opSubtraction(sdSphere(abs(p) - vec3(1.0, 0.2, 1.0), 0.5), v);
        v = min(v, sdCappedTorus(p, vec2(sin(an), cos(an)), 0.5, 0.2));
        v = min(v, sdBoxFrame(p - vec3(0.0, 0.45, 0.0), vec3(0.2, 0.3, 0.3), 0.03));
        v = opIntersection(v, abs(p.x) * sin(iTime) + abs(p.z) * cos(iTime) - 0.3);
        return v;
    }

    vec3 getPigment(vec3 p) {
        vec3 c = vec3(0.9);
        float an = 2.5 * (0.5 + 0.5 * sin(iTime * 1.1 + 3.0));
        float far = length(p.xz);
        if (p.y < -0.295 && far < 2.0) {
            c = vec3(0.7);
        }
        if (p.y < -0.305) {
            c = vec3(0.5, 0.35, 0.25) * 2.0 / (2.0 + floor(-p.y));
        }
        
        float ct = sdCappedTorus(p, vec2(sin(an), cos(an)), 0.5, 0.2);
        if (ct < 0.01) {
            c = vec3(0.3, 0.4 + p.y * 0.3, 0.5 + p.y * 0.3);
        }
        if (ct < -0.02) {
            c = vec3(0.04);
        }
        
        return c;
    }

    vec3 sky(vec3 dir) {
        return mix(
            vec3(0.3, 0.24, 0.46),
            vec3(0.8, 0.97, 1.0),
            dir.y * 0.5 + 0.5
        );
    }

}
